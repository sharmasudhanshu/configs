FROM golang:1.12-alpine AS build-env
RUN apk add --no-cache git mercurial \
   && go get github.com/joho/godotenv \
   && go get github.com/segmentio/kafka-go \
   && go get golang.org/x/net/context \
   && apk del git mercurial
ADD . /src
RUN cd /src && go build -o kafka_consumer

# final stage: Create image with only build artifacts
FROM alpine
WORKDIR /usr/src/app
COPY --from=build-env /src/kafka_consumer /usr/src/app/
ENTRYPOINT ./kafka_consumer



#####################################
consumer.go

package main

import (
	"bytes"
	"fmt"
	"github.com/segmentio/kafka-go"
	"golang.org/x/net/context"
	"log"
	"net/http"
	"os"
	"runtime"
	"strings"
	"sync"
)

// to consume messages

func main(){
	//err := godotenv.Load()
	//if err != nil {
	//	log.Fatal("Error loading .env file")
	//}

	fmt.Printf("starting service with following env varibales %v %v %v", os.Getenv("kafka_broker"),os.Getenv("influxdb_host"),os.Getenv("kafka_topic"))

	runtime.GOMAXPROCS(2)
	var wg sync.WaitGroup
	wg.Add(2)

	go KafkaConsumerNonProd(&wg)
	go KafkaConsumerProd(&wg)

	fmt.Println("Waiting To Finish")
	wg.Wait()

	fmt.Println("\nTerminating Program")


}

func KafkaConsumerNonProd(wg *sync.WaitGroup) {

	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers:   strings.Split(os.Getenv("kafka_broker_nonprod"),","),
		GroupID:   os.Getenv("kafka_consumer_id"),
		Topic:     os.Getenv("kafka_topic"),
		MinBytes:  10e1, // 1KB
		MaxBytes:  10e6, // 10MB
	})

	for {
		m, err := r.ReadMessage(context.Background())
		if err != nil {
			log.Print(err)
		}
		fmt.Printf(" Non-Prod vm message at topic/partition/offset %v/%v/%v: %s = %s\n", m.Topic, m.Partition, m.Offset, string(m.Key), string(m.Value))
		Write(string(m.Value))
	}

	r.Close()
	wg.Done()

}

func KafkaConsumerProd(wg *sync.WaitGroup) {

	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers:   strings.Split(os.Getenv("kafka_broker_prod"),","),
		GroupID:   os.Getenv("kafka_consumer_id"),
		Topic:     os.Getenv("kafka_topic"),
		MinBytes:  10e1, // 1KB
		MaxBytes:  10e6, // 10MB
	})

	for {
		m, err := r.ReadMessage(context.Background())
		if err != nil {
			log.Print(err)
		}
		fmt.Printf(" Prod vm message at topic/partition/offset %v/%v/%v: %s = %s\n", m.Topic, m.Partition, m.Offset, string(m.Key), string(m.Value))
		Write(string(m.Value))
	}

	r.Close()
	wg.Done()

}

func Write(lineMsg string )  {
	var jsonStr = []byte(string(lineMsg))
	url:="http://"+os.Getenv("influxdb_host")+"/write?db="+os.Getenv("influxdb_database")
	print(url)
	resp, err := http.Post(url,"application/octet-stream",bytes.NewBuffer(jsonStr))
	if err!=nil {
	    fmt.Printf("printing error to DB")
		print(err)
	}
	fmt.Printf("WRITING message to DB")
	print(resp)
}










###################################

loadenv.sh

#!/bin/bash
###do not put space between = sign and use only "_" in between keys
export kafka_broker_prod="kafkatest-prodvm.jaws.jio.com:32090,kafkatest-prodvm.jaws.jio.com:32091,kafkatest-prodvm.jaws.jio.com:32092"
export kafka_broker_nonprod="kafkatest-nonprodvm.jaws.jio.com:31090,kafkatest-nonprodvm.jaws.jio.com:31091,kafkatest-nonprodvm.jaws.jio.com:31092"
export kafka_consumer_id="golang"
export kafka_topic="telegraf"
export influxdb_database="telegraf"
export influxdb_host="10.159.17.42:8086"


#################

env-file

#!/bin/bash
###do not put space between = sign and use only "_" in between keys
kafka_broker_prod="kafkatest-prodvm.jaws.jio.com:32090,kafkatest-prodvm.jaws.jio.com:32091,kafkatest-prodvm.jaws.jio.com:32092"
kafka_broker_nonprod="kafkatest-nonprodvm.jaws.jio.com:31090,kafkatest-nonprodvm.jaws.jio.com:31091,kafkatest-nonprodvm.jaws.jio.com:31092"
kafka_consumer_id="golang"
kafka_topic="telegraf"
influxdb_database="telegraf"
influxdb_host="10.159.17.42:8086"


#####################

